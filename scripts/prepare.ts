import { write } from "bun";
import { resolve } from "node:path";
import { listVoices } from "../src/utils.js";
import { format } from "prettier";

const voices = await listVoices();

const voicesFile = await format(
  `
/**
 * This file is generated by the script \`scripts/prepare.ts\`
 */

const names = [${voices.map((v) => `"${v.Name}"`).join(", ")}] as const;

export type Name = typeof names[number];

const shortNames = [${voices
    .map((v) => `"${v.ShortName}"`)
    .join(", ")}] as const;

export type ShortName = typeof shortNames[number];

const friendlyNames = [${voices
    .map((v) => `"${v.FriendlyName}"`)
    .join(", ")}] as const;

export type FriendlyName = typeof friendlyNames[number];

const genders = [${Array.from(new Set(voices.map((v) => v.Gender)))
    .map((e) => `"${e}"`)
    .join(", ")}] as const;

export type Gender = typeof genders[number];

const locales = [${Array.from(new Set(voices.map((v) => v.Locale)))
    .map((e) => `"${e}"`)
    .join(", ")}] as const;

export type Locale = typeof locales[number];

const suggestedCodecs = [${Array.from(
    new Set(voices.map((v) => v.SuggestedCodec))
  )
    .map((e) => `"${e}"`)
    .join(", ")}] as const;

export type SuggestedCodec = typeof suggestedCodecs[number];

const status = [${Array.from(new Set(voices.map((v) => v.Status)))
    .map((e) => `"${e}"`)
    .join(", ")}] as const;

export type Status = typeof status[number];

const contentCategories = [${Array.from(
    new Set(voices.map((v) => v.VoiceTag.ContentCategories).flat())
  )
    .map((e) => `"${e}"`)
    .join(", ")}] as const;

export type ContentCategory = typeof contentCategories[number];

const voicePersonalities = [${Array.from(
    new Set(voices.map((v) => v.VoiceTag.VoicePersonalities).flat())
  )
    .map((e) => `"${e}"`)
    .join(", ")}] as const;

export type VoicePersonality = typeof voicePersonalities[number];

export interface VoiceTag {
  ContentCategories: ContentCategory[];
  VoicePersonalities: VoicePersonality[];
}

export interface Voice {
  Name: Name;
  ShortName: ShortName;
  Gender: Gender;
  Locale: Locale;
  SuggestedCodec: SuggestedCodec;
  FriendlyName: FriendlyName;
  Status: Status;
  VoiceTag: VoiceTag;
}
`,
  {
    parser: "typescript",
  }
);

await write(resolve(import.meta.dir, "../src/voice.ts"), voicesFile);

console.log(`Voice file written.`);
